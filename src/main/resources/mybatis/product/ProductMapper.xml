<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.sghong.manager.app.product.mapper.ProductMapper">
    <sql id="products_excel_temp_field">
        item_no,
        categorycode1,
        categorycode2,
        productclass,
        marketingword,
        productname,
        standard,
        productshortname,
        onlineflag,
        empflag,
        bizflag,
        costprice,
        agencyprice,
        tagprice,
        saleprice,
        empprice,
        bizprice,
        minsalecnt,
        maxsalecnt,
        qty,
        offflag,
        salestate,
        brandcode,
        keyword,
        description,
        fixdelvflag,
        freedelvflag,
        taxtype,
        productkind,
        producttype,
        productgubn,
        makeyear,
        makedm,
        maker,
        origincode,
        origin,
        sex,
        stockupflag,
        releasecentercode,
        releaseproductcode
    </sql>

    <sql id="products_field">
        item_no,
        categorycode1,
        categorycode2,
        productclass,
        marketingword,
        productname,
        standard,
        productshortname,
        onlineflag,
        empflag,
        bizflag,
        costprice,
        agencyprice,
        tagprice,
        saleprice,
        empprice,
        bizprice,
        minsalecnt,
        maxsalecnt,
        offflag,
        salestate,
        brandcode,
        keyword,
        description,
        fixdelvflag,
        freedelvflag,
        taxtype,
        productkind,
        producttype,
        productgubn,
        makeyear,
        makedm,
        maker,
        origincode,
        origin,
        sex,
        stockupflag,
        releasecentercode,
        releaseproductcode
    </sql>

    <sql id="products_select_field">
        a.productcode,
        a.item_no,
        a.categorycode1,
        a.categorycode2,
        a.productclass,
        a.marketingword,
        a.productname,
        a.standard,
        a.productshortname,
        a.onlineflag,
        a.empflag,
        a.bizflag,
        a.costprice,
        a.agencyprice,
        a.tagprice,
        a.saleprice,
        a.empprice,
        a.bizprice,
        a.minsalecnt,
        a.maxsalecnt,
        a.offflag,
        a.salestate,
        a.brandcode,
        a.keyword,
        a.description,
        a.fixdelvflag,
        a.freedelvflag,
        a.taxtype,
        a.productkind,
        a.producttype,
        a.productgubn,
        a.makeyear,
        a.makedm,
        a.maker,
        a.origincode,
        a.origin,
        a.sex,
        a.stockupflag,
        a.releasecentercode,
        a.releaseproductcode,
        a.createid as id,
        a.createdt
    </sql>

    <select id="select_product_by_list_for_totalcount" parameterType="hashmap" resultType="int">
        set session transaction isolation level read uncommitted;

        select
        ifnull(count(a.productcode), 0) as totalcount
        from            products as a
        inner join      products_brand as b on a.brandcode = b.brandcode
        left outer join view_products_stock_for_usable as c on a.productcode = c.productcode
        left outer join view_products_stock as s on a.productcode = s.productcode
        <where>
            <include refid="product_list_search" />
        </where>
        ;

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_by_list" parameterType="hashmap" resultType="productListDto">
        set session transaction isolation level read uncommitted;

        select
        <include refid="products_select_field" />,
        b.brandname,
        ifnull(c.stock, 0) as stock,
        ifnull(s.stockqty, 0) as stockqty,
        ifnull(s.saleqty, 0) as shopsaleqty,
        ifnull(s.outsaleqty, 0) as outsaleqty,
        ifnull(s.restqty, 0) as restqty,
        ifnull((select imageurl from products_image as z where z.productcode = a.productcode and z.imageno = 1 and sizeclass='0060'), '') as imgurl
        from            products as a
        inner join      products_brand as b on a.brandcode = b.brandcode
        left outer join view_products_stock_for_usable as c on a.productcode = c.productcode
        left outer join view_products_stock as s on a.productcode = s.productcode
        <where>
            <include refid="product_list_search" />
        </where>
        <include refid="product_list_search_orderby" />
        limit           #{limitstart}, #{recordsize};

        set session transaction isolation level repeatable read;
    </select>

    <sql id="product_list_search">
        <if test='usedate != "Y" and sdate != "" and sdate != null'>
            <choose>
                <when test='datetype.equals("C")'>
                    and DATE_FORMAT(a.createdt, '%Y-%m-%d')  <![CDATA[>=]]> #{sdate}
                </when>
                <otherwise>
                    and DATE_FORMAT(a.updatedt, '%Y-%m-%d') <![CDATA[>=]]> #{sdate}
                </otherwise>
            </choose>
        </if>
        <if test='usedate != "Y" and edate != "" and edate != null'>
            <choose>
                <when test='datetype.equals("C")'>
                    and DATE_FORMAT(a.createdt, '%Y-%m-%d') <![CDATA[<=]]> #{edate}
                </when>
                <otherwise>
                    and DATE_FORMAT(a.updatedt, '%Y-%m-%d') <![CDATA[<=]]> #{edate}
                </otherwise>
            </choose>
        </if>
        <if test='releasecentercode != null and releasecentercode != ""'>
            and a.releasecentercode = #{releasecentercode}
        </if>
        <if test='categorycode1 != null and categorycode1 != ""'>
            and a.categorycode1 = #{categorycode1}
        </if>
        <if test='categorycode2 != null and categorycode2 != ""'>
            and a.categorycode2 = #{categorycode2}
        </if>
        <if test='onlineflag != null and onlineflag != ""'>
            and a.onlineflag = 'Y'
        </if>
        <if test='bizflag != null and bizflag != ""'>
            and a.bizflag = 'Y'
        </if>
        <if test='fixdelvflag != null and fixdelvflag != ""'>
            and a.fixdelvflag = 'Y'
        </if>
        <if test='freedelvflag != null and freedelvflag != ""'>
            and a.freedelvflag = 'Y'
        </if>
        <if test='offflag != null and offflag != ""'>
            and a.offflag = #{offflag}
        </if>
        <if test='taxtype != null and taxtype != ""'>
            and a.taxtype = #{taxtype}
        </if>
        <if test='brandcode != null and brandcode != ""'>
            and a.brandcode = #{brandcode}
        </if>
        <if test='producttype != null and producttype != ""'>
            and a.producttype = #{producttype}
        </if>
        <if test='!salestate[0].equals("0")'>
            and a.salestate in
            <foreach collection="salestate" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test='!productclass[0].equals("0")'>
            and a.productclass in
            <foreach collection="productclass" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test='stockcnt1 != null and stockcnt1 != ""'>
            and c.stock <![CDATA[>=]]> #{stockcnt1}
        </if>
        <if test='stockcnt2 != null and stockcnt2 != ""'>
            and c.stock <![CDATA[<=]]> #{stockcnt2}
        </if>
        <if test='keywords != null'>
            <foreach collection="keywords" item="item" index="index" open="and (" close=")" separator="or">
                <choose>
                    <when test='searchtype.equals("productname")'>
                        a.productname LIKE CONCAT('%', #{item}, '%')
                    </when>
                    <when test='searchtype.equals("productcode")'>
                        a.productcode = #{item}
                    </when>
                    <when test='searchtype.equals("itemno")'>
                        a.item_no = #{item}
                    </when>
                </choose>
            </foreach>
        </if>
        <if test='notinproductcodes != null'>
            and a.productcode not in
            <foreach collection="notinproductcodes" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
    </sql>

    <sql id="product_list_search_orderby">
        <choose>
            <when test='orderby.equals("0")'>
                order by a.productcode desc
            </when>
            <when test='orderby.equals("1")'>
                order by c.stock desc, a.productcode desc
            </when>
            <when test='orderby.equals("2")'>
                order by c.stock asc, a.productcode desc
            </when>
            <when test='orderby.equals("3")'>
                order by a.productname asc, a.productcode desc
            </when>
            <when test='orderby.equals("4")'>
                order by a.productname desc, a.productcode desc
            </when>
            <when test='orderby.equals("5")'>
                order by a.saleprice asc, a.productcode desc
            </when>
            <when test='orderby.equals("6")'>
                order by a.saleprice desc, a.productcode desc
            </when>
            <otherwise>
                order by a.productcode desc
            </otherwise>
        </choose>
    </sql>

    <select id="select_releasecenter_by_list_for_use" resultType="releasecenterDto">
        set session transaction isolation level read uncommitted;

        select
            releasecentercode, releasecentername
        from        products_releasecenter
        where       useflag = 'Y';

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_gosi_category1_by_list_for_use" resultType="productGosiCategoryDto">
        set session transaction isolation level read uncommitted;

        select
            code1, name1
        from        products_gosi_category1
        where       useflag = 'Y';

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_gosi_category1_by_code1" resultType="productGosiCategoryDto">
        set session transaction isolation level read uncommitted;

        select
            code1, name1
        from        products_gosi_category1
        where       code1 = #{code1};

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_gosi_category2_by_code1_for_count" resultType="int">
        set session transaction isolation level read uncommitted;

        select
            IFNULL(COUNT(code1), 0)
        from        products_gosi_category2
        where       code1 = #{code1};

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_gosi_category2_by_code1" resultType="productGosiDto">
        set session transaction isolation level read uncommitted;

        select
            code1, code2, name2
        from        products_gosi_category2
        where       code1 = #{code1}
        order by    code2 asc;

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_products_gosi_by_productcode" resultType="productGosiDto">
        set session transaction isolation level read uncommitted;

        select
            a.code1, a.code2, a.name2, b.contents
        from            products_gosi_category2 as a
                            left outer join products_gosi as b on a.code1 = b.code1 and a.code2 = b.code2
        where           productcode = #{productCode}
        order by        a.code2 asc;

        set session transaction isolation level repeatable read;
    </select>

    <update id="update_product_by_productcode_for_state" parameterType="productDto">
        update products set
                            offflag = #{offflag},
                            salestate = #{salestate},
                            updateid = #{createid},
                            updateip = #{createip}
        where   productcode = #{productcode}
    </update>

    <select id="select_product_by_productcode" resultType="productDto">
        set session transaction isolation level read uncommitted;

        select
        <include refid="products_select_field" />
        from    products as a
        where   a.productcode = #{productCode};

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_by_productcodesin" resultType="productListDto">
        set session transaction isolation level read uncommitted;

        select
        <include refid="products_select_field" />,
        b.brandname,
        ifnull((select imageurl from products_image as z where z.productcode = a.productcode and z.imageno = 1 and sizeclass='0060'), '') as imgurl
        from            products as a
        inner join      products_brand as b on a.brandcode = b.brandcode
        <where>
            <if test='productCode != null'>
                and a.productcode in
                <foreach collection="productCode" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        order by        a.productcode asc;

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_by_itemNo" resultType="productDto">
        set session transaction isolation level read uncommitted;

        select
        productcode,
        <include refid="products_field" />
        from    products
        where   item_no = #{itemNo};

        set session transaction isolation level repeatable read;
    </select>

    <insert id="insert_product" parameterType="productDto" useGeneratedKeys="true" keyProperty="productcode" keyColumn="productcode">
        insert into products (
        <include refid="products_field" />,
        createid,
        createip
        )
        values (
        case when #{productclass} = 'P' then #{itemNo} else #{productclass} end,
        #{categorycode1},
        #{categorycode2},
        #{productclass},
        #{marketingword},
        #{productname},
        #{standard},
        #{productshortname},
        #{onlineflag},
        #{empflag},
        #{bizflag},
        #{costprice},
        #{agencyprice},
        #{tagprice},
        #{saleprice},
        #{empprice},
        #{bizprice},
        #{minsalecnt},
        #{maxsalecnt},
        #{offflag},
        #{salestate},
        #{brandcode},
        #{keyword},
        #{description},
        #{fixdelvflag},
        #{freedelvflag},
        #{taxtype},
        #{productkind},
        #{producttype},
        #{productgubn},
        #{makeyear},
        #{makedm},
        #{maker},
        #{origincode},
        #{origin},
        #{sex},
        #{stockupflag},
        #{releasecentercode},
        #{releaseproductcode},
        #{createid},
        #{createip}
        )
    </insert>

    <update id="update_product_by_productcode_for_itemno_set">
        update products set
            item_no = #{itemNo}
        where productcode = #{productCode}
    </update>

    <insert id="insert_product_gosi" parameterType="productGosiDto">
        insert into products_gosi (
            productcode,
            code1,
            code2,
            contents,
            createid,
            createip
        )
        values (
                   #{productcode},
                   #{code1},
                   #{code2},
                   #{contents},
                   #{createid},
                   #{createip}
               )
    </insert>

    <insert id="insert_product_unit" parameterType="productUnitDto">
        insert into products_unit (
            productcode,
            unitproductcode,
            qty,
            unitsaleprice,
            unitempprice,
            unitbizprice,
            standardflag,
            createid,
            createip
        ) values (
                     #{productcode},
                     #{unitproductcode},
                     #{qty},
                     #{unitsaleprice},
                     #{unitempprice},
                     #{unitbizprice},
                     #{standardflag},
                     #{createid},
                     #{createip}
                 )
    </insert>

    <insert id="insert_product_stock" parameterType="productStockDto">
        insert into products_stock (
            productcode,
            item_no,
            stockqty,
            saleqty,
            outsaleqty,
            restqty,
            createid,
            createip
        ) values (
                     #{productcode},
                     #{itemNo},
                     #{stockqty},
                     #{saleqty},
                     #{outsaleqty},
                     #{restqty},
                     #{createid},
                     #{createip}
                 )
    </insert>

    <insert id="insert_product_image">
        insert into products_image (
            productcode,
            imageno,
            sizeclass,
            imageurl,
            createid,
            createip
        ) values (
                     #{productcode},
                     #{imageno},
                     #{sizeclass},
                     #{imageurl},
                     #{createid},
                     #{createip}
                 )
    </insert>

    <delete id="delete_product_setproduct_temp_by_createid">
        delete from products_setproduct_temp
        where createid = #{createid}
    </delete>

    <insert id="insert_product_setproduct_temp_by_createid">
        insert into products_setproduct_temp (
            productcode,
            qty,
            createid,
            createip
        ) values (
                     #{productCode},
                     #{qty},
                     #{createid},
                     #{createip}
                 )
    </insert>

    <select id="select_product_setproduct_temp_by_createid_for_count" resultType="int">
        set session transaction isolation level read uncommitted;

        select
            ifnull(count(*), 0)
        from            products_setproduct_temp
        where           createid = #{createid};

        set session transaction isolation level repeatable read;
    </select>

    <select id="select_product_setproduct_by_createid_for_dupcheck" resultType="productDto">
        set session transaction isolation level read uncommitted;

        select
            a.productcode
        from            products_unit as a
                            inner join      (
            select
                z.productcode
            from            products as z
                                inner join      products_unit as y on z.productcode = y.productcode
            where           z.productclass = 'S'
            group by        z.productcode
            having          count(*) = #{count}
        ) as b on a.productcode = b.productcode
                            inner join      products_setproduct_temp as c on c.createid = #{createid} and a.unitproductcode = c.productcode and a.qty = c.qty
        group by        a.productcode
        having          count(*) = #{count}
            limit           1;

        set session transaction isolation level repeatable read;
    </select>

    <insert id="insert_product_history_by_productcode">
        insert into products_history (
        productcode,
        <include refid="products_field" />,
        createid,
        createip,
        createdt,
        updateid,
        updateip,
        updatedt
        )
        select
        productcode,
        <include refid="products_field" />,
        createid,
        createip,
        createdt,
        updateid,
        updateip,
        updatedt
        from products
        where productcode = #{productCode}
    </insert>
</mapper>